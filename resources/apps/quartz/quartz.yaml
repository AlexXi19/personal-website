apiVersion: apps/v1
kind: Deployment
metadata:
  name: notes-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notes-app
  template:
    metadata:
      labels:
        app: notes-app
    spec:
      serviceAccountName: restart-deployment-service-account
      volumes:
      - name: content-volume
        emptyDir: {}
      initContainers:
      - name: git-repo-cloner
        image: alpine/git
        volumeMounts:
        - name: content-volume
          mountPath: /usr/src/app/content
        env:
        - name: GIT_SYNC_REPO
          value: https://github.com/alexxi19/notes.git
        - name: GIT_SYNC_DEST
          value: /usr/src/app/content
        - name: GIT_SYNC_BRANCH
          value: main
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-creds
              key: username
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-creds
              key: password
        command: ['/bin/sh']
        args:
        - '-c'
        - |
          set -e
          git config --global credential.helper store
          git credential approve <<EOF
          protocol=https
          host=github.com
          username=$GIT_USERNAME
          password=$GIT_PASSWORD
          EOF
          git clone --branch "$GIT_SYNC_BRANCH" "$GIT_SYNC_REPO" "$GIT_SYNC_DEST"
      containers:
      - name: quartz
        image: alexxi19/quartz:latest
        imagePullPolicy: "Always"
        volumeMounts:
        - name: content-volume
          mountPath: /usr/src/app/content
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
      - name: git-repo-syncer
        image: alpine/git
        volumeMounts:
        - name: content-volume
          mountPath: /usr/src/app/content
        env:
        - name: GIT_SYNC_REPO
          value: https://github.com/alexxi19/notes.git
        - name: GIT_SYNC_DEST
          value: /usr/src/app/content
        - name: GIT_SYNC_BRANCH
          value: main
        - name: GIT_SYNC_WAIT
          value: "5"
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-creds
              key: username
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-creds
              key: password
        command: ['/bin/sh']
        args:
        - '-c'
        - |
          set -e
          set -o pipefail

          git config --global credential.helper store

          git credential approve <<EOF
          protocol=https
          host=github.com
          username=$GIT_USERNAME
          password=$GIT_PASSWORD
          EOF

          if [ ! -d "$GIT_SYNC_DEST/.git" ]; then
            git clone --branch "$GIT_SYNC_BRANCH" "$GIT_SYNC_REPO" "$GIT_SYNC_DEST"
          fi

          while true; do
              cd "$GIT_SYNC_DEST"
              git fetch --prune --all
              LOCAL_COMMIT_ID=$(git rev-parse HEAD)
              REMOTE_COMMIT_ID=$(git rev-parse "origin/$GIT_SYNC_BRANCH")
              if [ "$LOCAL_COMMIT_ID" != "$REMOTE_COMMIT_ID" ]; then
                git reset --hard "origin/$GIT_SYNC_BRANCH"
                apk --no-cache add curl
                TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
                DEPLOYMENT_NAME=notes-app
                curl -k -X PATCH \
                  -d "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"`date +'%s'`\"}}}}}" \
                  -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
                  -H "Content-Type: application/strategic-merge-patch+json" \
                  -H "Accept: application/json" \
                  "https://kubernetes.default.svc/apis/apps/v1/namespaces/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/deployments/$DEPLOYMENT_NAME"
              fi
              sleep "$GIT_SYNC_WAIT"
            done



---

apiVersion: v1
kind: Service
metadata:
  name: notes-app-service
spec:
  selector:
    app: notes-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP

